From 51db98b80733cd3dc4e760a4bf788c893d329442 Mon Sep 17 00:00:00 2001
From: jgeboski <jgeboski@gmail.com>
Date: Sat, 31 Dec 2011 02:44:46 -0500
Subject: [PATCH] Disable uinput device loading

---
 src/main/python/gnome15/g15uinput.py |   89 ++--------------------------------
 1 files changed, 5 insertions(+), 84 deletions(-)

diff --git a/src/main/python/gnome15/g15uinput.py b/src/main/python/gnome15/g15uinput.py
index d7a9e5b..913bd3a 100644
--- a/src/main/python/gnome15/g15uinput.py
+++ b/src/main/python/gnome15/g15uinput.py
@@ -59,57 +59,16 @@ GNOME15_DIGITAL_JOYSTICK_PRODUCT_ID = 0x0004
     
     
 def open_devices():
-    """
-    Initialize, opening all devices
-    """
-    __check_devices()
+    return
     
 def close_devices():
-    """
-    Clean up, closing all the devices
-    """
-    for device_type in DEVICE_TYPES:
-        if device_type in uinput_devices:
-            logger.debug("Closing UINPUT device %s" % device_type)
-            del uinput_devices[device_type]
+    return
     
 def syn(target):
-    """
-    Emit the syn.
-    
-    Keyword arguments:
-    target         --    target device type (MOUSE, KEYBOARD or JOYSTICK).
-    """
-    uinput_devices[target].syn()
+    return
     
 def emit(target, code, value, syn=True, event_type = None):
-    """
-    Emit an input event, optionally emit a SYN as well
-    
-    Keyword arguments:
-    target         --    The target device type (MOUSE, KEYBOARD or JOYSTICK)
-                         type code.
-    code           --    uinput code
-    value          --    uinput value
-    syn            --    emit SYN (defaults to True)
-    ev_type        --    if not supplied, will be default for target type
-    """
-    ev_type = event_type
-    if ev_type is None:
-        if target == MOUSE and code in [ uinput.REL_X, uinput.REL_Y ]:
-            if logger.isEnabledFor(logging.DEBUG):
-                logger.debug("UINPUT mouse event at %s, code = %d, val = %d, syn = %s" % ( target, code, value, str(syn) ) )
-            ev_type = uinput.EV_REL
-        elif ( target == JOYSTICK or target == DIGITAL_JOYSTICK ) and code in [ uinput.ABS_X, uinput.ABS_Y ]:
-            if logger.isEnabledFor(logging.DEBUG):
-                logger.debug("UINPUT joystick event at %s, code = %d, val = %d, syn = %s" % ( target, code, value, str(syn) ) )
-            ev_type = uinput.EV_ABS
-        else: 
-            ev_type = uinput.EV_KEY
-            if logger.isEnabledFor(logging.DEBUG):
-                logger.debug("UINPUT uinput keyboard event at %s, code = %d, val = %d, syn = %s" % ( target, code, value, str(syn) ) )
-    
-    uinput_devices[target].emit(ev_type, code, value, syn)
+    return
     
 def __get_keys(prefix, exclude = None):
     l = []
@@ -142,42 +101,4 @@ def get_buttons(device_type):
     return b
     
 def __check_devices():
-    for device_type in DEVICE_TYPES:
-        if not device_type in uinput_devices:
-            logger.debug("Opening UINPUT device for %s" % device_type)
-            abs_parms = { }       
-            keys = []
-            for b, v in get_buttons(device_type):
-                keys.append(uinput.capabilities.CAPABILITIES[b])
-            if device_type == MOUSE:
-                virtual_product_id = GNOME15_MOUSE_PRODUCT_ID
-                caps = {
-                    uinput.EV_REL: [uinput.REL_X, uinput.REL_Y],
-                    uinput.EV_KEY: keys,
-                }
-            elif device_type == JOYSTICK:
-                virtual_product_id = GNOME15_JOYSTICK_PRODUCT_ID
-                caps = {
-                    uinput.EV_ABS: [uinput.ABS_X, uinput.ABS_Y],
-                    uinput.EV_KEY: keys,
-                }
-                abs_parms = registered_parameters[device_type]
-            elif device_type == DIGITAL_JOYSTICK:
-                virtual_product_id = GNOME15_JOYSTICK_PRODUCT_ID
-                caps = {
-                    uinput.EV_ABS: [uinput.ABS_X, uinput.ABS_Y],
-                    uinput.EV_KEY: keys,
-                }
-                abs_parms = registered_parameters[device_type]
-            else:
-                virtual_product_id = GNOME15_KEYBOARD_PRODUCT_ID
-                caps = {
-                    uinput.EV_KEY: keys,
-                }
-            uinput_device = uinput.Device(name="gnome15-%s" % device_type,
-                                          capabilities = caps,
-                                          abs_parameters = abs_parms,
-                                          vendor = GNOME15_USB_VENDOR_ID,
-                                          product = virtual_product_id)                
-            uinput_devices[device_type] = uinput_device
-            uinput_device.emit(0, 0, 0, True)
\ No newline at end of file
+    return
-- 
1.7.4.4

