#!/bin/bash

# Slackware build script for Google Chromium
#
# This is script was inspired on the one used by Arch:
# (http://repos.archlinux.org/wsvn/packages/chromium/trunk/PKGBUILD)
#
# A special thanks to Niels Horn who helped me fixing some errors on
# the script and for testing it.
#
# A very special thanks to Gino Bombino (ginolovesyou AT gmail DOT com), who
# contributed with the parameters to disable the need for gnome dependencies
# and PAM, allowing the script to be cleaner and more elegant (no need for a
# a patch to disable PAM).
#
# Copyright 2010 Yucatan "Kenjiro" Costa, Alegrete, RS, Brasil
# Copyright 2012-2013 James Geboski <jgeboski@gmail.com>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PRGNAM=chromium
VERSION=${VERSION:-29.0.1524.0}
BUILD=${BUILD:-1}
TAG=${TAG:-_jgeboski}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i486 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/jgeboski}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION.tar.xz
cd $PRGNAM-$VERSION

chown -R root:root .
find . \
 \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

# A hack around to make sure `chrome` returns 0 when the main chrome
# process has been notified.
sed -i \
  "s/chrome::RESULT_CODE_NORMAL_EXIT_PROCESS_NOTIFIED/content::RESULT_CODE_NORMAL_EXIT/" \
 chrome/browser/chrome_browser_main.cc

build/gyp_chromium --depth=. \
  -Dchromeos=0 \
  -Dfastbuild=1 \
  -Dffmpeg_branding=Chrome \
  -Dgcc_version=47 \
  -Dno_strict_aliasing=1 \
  -Dproprietary_codecs=1 \
  -Dpython_ver=2.7 \
  -Dremoting=0 \
  -Dremove_webcore_debug_symbols=1 \
  -Dwerror= \
  -Dlibspeechd_h_prefix=speech-dispatcher/ \
  -Dlinux_link_libspeechd=1 \
  -Dlinux_sandbox_path=/usr/lib${LIBDIRSUFFIX}/chromium/chrome_sandbox \
  -Dlinux_strip_binary=1 \
  -Dlinux_strip_reliability_tests=1 \
  -Dlinux_use_gold_flags=0 \
  -Dlinux_use_gold_binary=0 \
  -Ddisable_nacl=1 \
  -Denable_google_now=0 \
  -Duse_gconf=0 \
  -Duse_gnome_keyring=0 \
  -Duse_kerberos=0 \
  -Duse_openssl=0 \
  -Duse_pulseaudio=0 \
  -Duse_system_expat=1 \
  -Duse_system_ffmpeg=0 \
  -Duse_system_icu=1 \
  -Duse_system_libexif=1 \
  -Duse_system_libjpeg=1 \
  -Duse_system_libmtp=1 \
  -Duse_system_libxml=1 \
  -Duse_system_mesa=0 \
  -Duse_system_nspr=0 \
  -Duse_system_protobuf=1 \
  -Duse_system_sqlite=0 \
  -Duse_system_ssl=0 \
  -Duse_system_xdg_utils=1 \
  -Duse_system_yasm=1

  ## Causes segfault on startup
  #-Duse_system_nspr=1

  ## Various build errors
  #-Ddisable_nacl=0
  #-Duse_system_mesa=1
  #-Duse_system_sqlite=1
  #-Duse_system_ssl=1

CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
ninja -C out/Release chrome chrome_sandbox

mkdir -p \
  $PKG/usr/bin \
  $PKG/usr/lib${LIBDIRSUFFIX}/chromium \
  $PKG/usr/man/man1 \
  $PKG/usr/share/{applications,pixmaps}

cd out/Release
  install -m 755 \
    chrome libffmpegsumo.so \
   $PKG/usr/lib${LIBDIRSUFFIX}/chromium

  cp -a \
    locales/ resources/ \
   $PKG/usr/lib${LIBDIRSUFFIX}/chromium

  install -m 644  *.pak                 $PKG/usr/lib${LIBDIRSUFFIX}/chromium
  install -m 4755 chrome_sandbox        $PKG/usr/lib${LIBDIRSUFFIX}/chromium
  install -m 644  chrome.1              $PKG/usr/man/man1
  install -m 644  $CWD/chromium.desktop $PKG/usr/share/applications
cd -

install -m 644 \
  chrome/app/theme/chromium/product_logo_128.png \
 $PKG/usr/share/pixmaps/chromium.png

find $PKG -name '*.d' -type f -delete

cat > $PKG/usr/bin/chrome <<EOF
#!/bin/sh
/usr/lib${LIBDIRSUFFIX}/chromium/chrome \$CHROME_OPTIONS \$@
EOF

chmod a+x $PKG/usr/bin/chrome

find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a \
  AUTHORS LICENSE \
 $PKG/usr/doc/$PRGNAM-$VERSION/
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
